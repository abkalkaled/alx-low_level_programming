!<arch>
0-isupper.c/    0           0     0     644     209       `
#include "main.h"
/**
 * _isupper - checks for uppercase
 * @c: character in check
 * Return: 1 for uppercase, 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	return (0);
}

0-memset.c/     0           0     0     644     344       `
#include "main.h"
/**
 *  _memset - fill n bytes of memory with a const value
 *  @s: pointer to memory area
 *  @b: constant value
 *  @n: number of bytes to fill
 *  Return: the memory area
 */

char *_memset(char *s, char b, unsigned int n)
{
	int size = n;

	if (size > 0)
{
	int i;

	for (i = 0; i < size; i++)
		s[i] = b;
}
return (s);
}
0-strcat.c/     0           0     0     644     385       `
#include "main.h"
/**
*_strcat - strats to concatenates two strings.
*@dest: pointer to dest string.
*@src: pointer to source string.
*Return: destination string ponter.
 */
char *_strcat(char *dest, char *src)
{
	int len, i;

	len = 0;
	while (dest[len] != '\0')
	{
		len++;
	}
	for (i = 0; src[i] != '\0'; i++, len++)
	{
		dest[len] = src[i];
	}
	dest[len] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     20        `
int _atoi(char *s);
1-isdigit.c/    0           0     0     644     202       `
#include "main.h"
/**
 * _isdigit - checks for digit starts
 * @c: the digit in check
 * Return: 1 if true, 0 false
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	return (0);
}
1-memcpy.c/     0           0     0     644     336       `
#include "main.h"
/**
* char *_memcpy - copies n bytes from memory area src to dest
* @dest: destination
* @src: source
* @n: number of bytes
* Return: pointer to dest
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int size = n;

	if (size > 0)
{
	int i;

	for (i = 0; i < size; i++)
		dest[i] = src[i];
}
return (dest);
}
1-strncat.c/    0           0     0     644     451       `
#include "main.h"
/**
 *_strncat - function that concatenates two strings.
 *@dest: pointer to destination string.
 *@src: pointer to source
 *@n: number of bytes to concatenate
 *Return: pointer to destination string.
 */
char *_strncat(char *dest, char *src, int n)
{
	int len, a;

	len = 0;
	while (dest[len] != '\0')
	{
		len++;
	}
	for (a = 0; a < n && src[a] != '\0'; a++, len++)
	{
		dest[len] = src[a];
	}
	dest[len] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     354       `
#include "main.h"
/**
* _strchr - locate 1st occurrence of char in string and returns pointer there
* @s: string to search
* @c: target characer
* Return: pointer to that character in string
*/

char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != '\0' && s[i] != c)
		i++;
	if (s[i] == c)
	{
		return (&s[i]);
	}
	else
	{
		return (NULL);
	}
}
2-strlen.c/     0           0     0     644     236       `
#include "main.h"
/**
 * _strlen - function for length of a string
 * @s: string
 * @len: lenght of string
 * Return: len
 */
int _strlen(char *s)
{
	int i;
	int len = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		len++;
	}
	return (len);
}
2-strncpy.c/    0           0     0     644     452       `
#include "main.h"
/**
 * _strncpy - func that copies string
 * @dest: pointer to destination string
 * @src: pointer to source string@n: num of bytes to be used
 * @n: num of bCount
 * Return: pointer to destination string
 */
char *_strncpy(char *dest, char *src, int n)
{
	int bCount;

	for (bCount = 0; bCount < n && src[bCount] != '\0'; bCount++)
		dest[bCount] = src[bCount];
	for (; bCount < n; bCount++)
		dest[bCount] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     209       `
#include "main.h"
/**
 * _islower - entry point
 * @c: lowercase in check
 * Return: 1 if c is lowercase, 0 if otherwise
 */
int _islower(int c)
{

	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}

3-puts.c/       0           0     0     644     224       `
#include "main.h"
/**
 * _puts - prints string
 * @s: string to be printed
 * @str: pointer
 * Return: void
 */
void _puts(char *str)
{
	int s;

	for (s = 0; str[s] != '\0'; s++)
	{
		_putchar(str[s]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     365       `
#include "main.h"
/**
 * _strcmp - Comparing two strings starts here
 * @s1: first string pointer
 * @s2: second string pointer
 * Return: 0 when strings equal
 */
int _strcmp(char *s1, char *s2)
{
	int counter, comp;

		counter = 0;
	while (s1[counter] == s2[counter] && s1[counter] != '\0')
	{
		counter++;
	}
	comp = s1[counter] - s2[counter];
	return (comp);
}

3-strspn.c/     0           0     0     644     487       `
#include "main.h"
/**
* _strspn - return length of string that matches values consistently
* @s: string to search
* @accept: target matches
* Return: number of bytes consecutively matched
*/

unsigned int _strspn(char *s, char *accept)
{
	int i = 0, j;
	int match = 0;

	while (s[i] != '\0')
{
	for (j = 0; accept[j] != '\0'; j++)
	{
		if (s[i] == accept[j])
		{
			match++;
			break;
		}
		if (accept[j + 1] == '\0' && s[i] != accept[j])
			return (match);
	}
	i++;
}
return (match);
}

4-isalpha.c/    0           0     0     644     249       `
#include "main.h"
/**
 * _isalpha - the start of the running
 * @c: is the alphabet being checked for
 * Return: 1 if true, 0 toherwise
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	return (0);
}

4-strpbrk.c/    0           0     0     644     391       `
#include "main.h"
/**
* _strpbrk - loaction fo first occurence starts
* @s: string to search
* @accept: target matches
* Return: pointer to index of string at first occurence
*/

char *_strpbrk(char *s, char *accept)
{
	int i;
	int j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
		}
	}
	return (0);
}

5-strstr.c/     0           0     0     644     610       `
#include "main.h"
/**
* _strstr - function to locate and return pointer to first occurence of substring
* @haystack: string to search
* @needle: target substring in search
* Return: haystack pointer or NULL
*/

char *_strstr(char *haystack,char *needle)
{
	int a = 0, b, x;

	if (needle[0] == '\0')
		return (haystack);
	while (haystack[a] != '\0')
	{
		if (haystack[a] == needle[0])
		{
			x = a, b = 0;
			while (needle[b] != '\0')
			{
				if (haystack[x] == needle[b])
					x++, b++;
				else
					break;
				}
			if (needle[b] == '\0')
			{
				return (haystack + a);
			}
		}
		a++;
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     195       `
#include "main.h"
/**
 * _abs - entry point
 * @n: representing the integer
 * Return: abs or 0
 */
int _abs(int n)
{
	if (n < 0)
	{
		int abs;

		abs = n * -1;
		return (abs);
	}
	return (n);
}

9-strcpy.c/     0           0     0     644     266       `
#include "main.h"
/**
 * _strcpy - copies string
 * @src: pointing value
 * @dest: pointing to value
 * Return: dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     234       `
#include <unistd.h>
/**
 * _putchar - writes the caharacter c to stdout
 * @c: The character to print
 *
 * Return - returns a value
 * On error, -1 is returned amd errno is set
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
